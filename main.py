import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import tkinter as tk
from tkinter import messagebox
import random

# –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≤–∞–≥ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º (–º–æ–∂–Ω–∞ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤)
def get_weights(scenario=1):
    if scenario == 1:
        return {
            "POS-—Å–∏—Å—Ç–µ–º–∞": 20,
            "–û–±–ª—ñ–∫ –∑–∞–ø–∞—Å—ñ–≤": 15,
            "–ü—Ä–æ–≥—Ä–∞–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ": 10,
            "–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ –ø–ª–∞—Ç—ñ–∂–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏": 20,
            "–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞": 20,
            "–ú–æ–±—ñ–ª—å–Ω–∏–π –¥–æ–¥–∞—Ç–æ–∫": 10,
            "–û—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º": 5
        }
    elif scenario == 2:
        return {
            "POS-—Å–∏—Å—Ç–µ–º–∞": 10,
            "–û–±–ª—ñ–∫ –∑–∞–ø–∞—Å—ñ–≤": 10,
            "–ü—Ä–æ–≥—Ä–∞–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ": 15,
            "–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ –ø–ª–∞—Ç—ñ–∂–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏": 10,
            "–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞": 30,
            "–ú–æ–±—ñ–ª—å–Ω–∏–π –¥–æ–¥–∞—Ç–æ–∫": 15,
            "–û—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º": 10
        }
    elif scenario == 3:
        return {
            "POS-—Å–∏—Å—Ç–µ–º–∞": 10,
            "–û–±–ª—ñ–∫ –∑–∞–ø–∞—Å—ñ–≤": 10,
            "–ü—Ä–æ–≥—Ä–∞–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ": 10,
            "–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ –ø–ª–∞—Ç—ñ–∂–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏": 15,
            "–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞": 10,
            "–ú–æ–±—ñ–ª—å–Ω–∏–π –¥–æ–¥–∞—Ç–æ–∫": 25,
            "–û—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º": 20
        }

# –î–∞–Ω—ñ –ø–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É –ü–°
systems_data = {
    "Poster":        [1, 1, 1, 1, 1, 1, 0],
    "Cashalot":      [1, 1, 0, 0, 1, 1, 1],
    "Syrve":         [1, 1, 1, 1, 1, 1, 0],
    "ULTRA Company": [1, 1, 0, 1, 1, 0, 1],
    "R-Keeper":      [1, 1, 1, 1, 1, 1, 0]
}

features = list(get_weights().keys())
df = pd.DataFrame(systems_data, index=features)

# –û–±—á–∏—Å–ª–µ–Ω–Ω—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ

def calculate_effectiveness(weights):
    weighted_df = df.mul(pd.Series(weights), axis=0)
    return weighted_df.sum().sort_values(ascending=False)

# –í–∏–≤—ñ–¥ –≥—Ä–∞—Ñ—ñ–∫—É –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —É –≤—ñ–∫–Ω—ñ tkinter

def plot_effectiveness_in_window(eff, title, root):
    frame = tk.Toplevel(root)
    frame.title(title)
    fig, ax = plt.subplots(figsize=(6, 4))
    sns.barplot(x=eff.values, y=eff.index, hue=eff.index, palette="viridis", legend=False, ax=ax)
    ax.set_title(title)
    ax.set_xlabel("–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å (%)")
    ax.set_xlim(0, 100)
    ax.grid(axis='x')
    fig.tight_layout()
    canvas = FigureCanvasTkAgg(fig, master=frame)
    canvas.draw()
    canvas.get_tk_widget().pack(expand=True, fill='both')
    tk.Button(frame, text="–ó–∞–∫—Ä–∏—Ç–∏", command=frame.destroy).pack(pady=5)

# –¢–µ–ø–ª–æ–≤–∞ –∫–∞—Ä—Ç–∞

def plot_heatmap_window(root):
    frame = tk.Toplevel(root)
    frame.title("–†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É –≤ –ü–°")
    fig, ax = plt.subplots(figsize=(7, 5))
    sns.heatmap(df.T, annot=True, cmap="YlGnBu", cbar=False, linewidths=.5, ax=ax)
    ax.set_title("–†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É –≤ –ü–°")
    ax.set_xlabel("–§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–∏")
    ax.set_ylabel("–ü—Ä–æ–≥—Ä–∞–º–Ω—ñ —Å–∏—Å—Ç–µ–º–∏")
    fig.tight_layout()
    canvas = FigureCanvasTkAgg(fig, master=frame)
    canvas.draw()
    canvas.get_tk_widget().pack(expand=True, fill='both')
    tk.Button(frame, text="–ó–∞–∫—Ä–∏—Ç–∏", command=frame.destroy).pack(pady=5)

# –°—Ç—Ä–µ—Å-—Ç–µ—Å—Ç

def plot_stress_distribution_in_window(effectiveness_series, root):
    frame = tk.Toplevel(root)
    frame.title("–°—Ç—Ä–µ—Å-—Ç–µ—Å—Ç")
    fig, ax = plt.subplots(figsize=(6, 4))
    sns.histplot(effectiveness_series, bins=15, kde=True, ax=ax)
    ax.set_title("–°—Ç—Ä–µ—Å-—Ç–µ—Å—Ç: —Ä–æ–∑–ø–æ–¥—ñ–ª –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ 100 –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö —Å–∏—Å—Ç–µ–º")
    ax.set_xlabel("–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å (%)")
    ax.set_ylabel("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∏—Å—Ç–µ–º")
    ax.grid(True)
    fig.tight_layout()
    canvas = FigureCanvasTkAgg(fig, master=frame)
    canvas.draw()
    canvas.get_tk_widget().pack(expand=True, fill='both')
    tk.Button(frame, text="–ó–∞–∫—Ä–∏—Ç–∏", command=frame.destroy).pack(pady=5)

# GUI

system_descriptions = {
        "Poster": "Poster ‚Äî —Ö–º–∞—Ä–Ω–∞ POS-—Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ–≤, –±–∞—Ä—ñ–≤ —Ç–∞ –∫–∞—Ñ–µ –∑ –ø—Ä–æ—Å—Ç–∏–º —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º —ñ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –º–æ–±—ñ–ª—å–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤.",
        "Cashalot": "Cashalot ‚Äî –¥–æ—Å—Ç—É–ø–Ω–∞ POS-—Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –º–∞–ª–∏—Ö –∑–∞–∫–ª–∞–¥—ñ–≤, –ø—ñ–¥—Ç—Ä–∏–º—É—î –æ—Ñ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º —ñ –æ—Å–Ω–æ–≤–Ω—ñ –æ–±–ª—ñ–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.",
        "Syrve": "Syrve ‚Äî –ø–æ—Ç—É–∂–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ–≤ —ñ –º–µ—Ä–µ–∂ –∑ —à–∏—Ä–æ–∫–∏–º–∏ –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–∏–º–∏ –º–æ–∂–ª–∏–≤–æ—Å—Ç—è–º–∏.",
        "ULTRA Company": "ULTRA ‚Äî —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∑ –≥–Ω—É—á–∫–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏, –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –¥–æ—Å—Ç–∞–≤–∫–∏ —Ç–∞ –æ—Ñ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º—É.",
        "R-Keeper": "R-Keeper ‚Äî —Ä—ñ—à–µ–Ω–Ω—è –¥–ª—è –º–µ—Ä–µ–∂–µ–≤–∏—Ö –∑–∞–∫–ª–∞–¥—ñ–≤ –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–æ–º, –º–∞—Å—à—Ç–∞–±–æ–≤–∞–Ω–µ –π –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–µ."
}

def launch_gui():
    all_features = features
    types = {
        1: "–ö–∞–≤'—è—Ä–Ω—è",
        2: "–ö–∞—Ñ–µ",
        3: "–†–µ—Å—Ç–æ—Ä–∞–Ω",
        4: "–ë–∞—Ä / –ü–∞–±",
        5: "Takeout –∑–∞–∫–ª–∞–¥"
    }

    root = tk.Tk()
    root.title("–Ü–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∏–π –ø—ñ–¥–±—ñ—Ä –ü–ó")
    root.geometry("700x800")

    tk.Label(root, text="üîç –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–∞–∫–ª–∞–¥—É", font=("Helvetica", 12, "bold")).pack(pady=5)
    zaklad_var = tk.IntVar(value=1)
    for i, name in types.items():
        tk.Radiobutton(root, text=name, variable=zaklad_var, value=i).pack(anchor='w')

    tk.Label(root, text="\n–û–±–µ—Ä—ñ—Ç—å –±–∞–∂–∞–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó", font=("Helvetica", 12, "bold")).pack(pady=10)
    feature_vars = []
    for feature in all_features:
        var = tk.BooleanVar()
        feature_vars.append(var)
        cb = tk.Checkbutton(root, text=feature, variable=var)
        cb.pack(anchor='w')

    def clear_all():
        zaklad_var.set(1)
        for var in feature_vars:
            var.set(False)

    def process_selection():
        selected_indices = [i for i, var in enumerate(feature_vars) if var.get()]
        if not selected_indices:
            messagebox.showwarning("–£–≤–∞–≥–∞", "–û–±–µ—Ä—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é.")
            return

        required_features = [features[i] for i in selected_indices]
        matches = {}
        for system in df.columns:
            f = df[system]
            if all(f.iloc[i] == 1 for i in selected_indices):
                matches[system] = [features[i] for i, val in enumerate(f) if val == 1]

        if not matches:
            messagebox.showwarning("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ", "–ñ–æ–¥–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤—Å—ñ–º –≤–∏–º–æ–≥–∞–º.")
            return

        win = tk.Toplevel(root)
        win.title("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø—ñ–¥–±–æ—Ä—É")
        text = tk.Text(win, wrap="word")
        text.insert(tk.END, f"–¢–∏–ø –∑–∞–∫–ª–∞–¥—É: {types.get(zaklad_var.get(), '')}\n\n")
        for name, feats in matches.items():
            extra = [f for f in feats if f not in required_features]
            text.insert(tk.END, f"üîπ {name}\n")
            text.insert(tk.END, f"   üìå {system_descriptions.get(name, '‚Äî')}\n")
            text.insert(tk.END, f"   ‚úÖ –í–∫–ª—é—á–∞—î: {', '.join(required_features)}\n")
            if extra:
                text.insert(tk.END, f"   ‚ûï –¢–∞–∫–æ–∂ –ø—ñ–¥—Ç—Ä–∏–º—É—î: {', '.join(extra)}\n")
            text.insert(tk.END, "\n")
        text.pack(expand=True, fill='both')
        tk.Button(win, text="–ó–∞–∫—Ä–∏—Ç–∏", command=win.destroy).pack(pady=5)

    def show_charts():
        for i in range(1, 4):
            weights = get_weights(i)
            eff = calculate_effectiveness(weights)
            plot_effectiveness_in_window(eff, f"–Ü–Ω–¥–µ–∫—Å –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ (–°—Ü–µ–Ω–∞—Ä—ñ–π {i})", root)

        random_df = generate_random_systems(100)
        weighted_random = random_df.mul(pd.Series(get_weights(1)), axis=0)
        random_eff = weighted_random.sum()
        plot_stress_distribution_in_window(random_eff, root)
        plot_heatmap_window(root)

    def generate_random_systems(n=50):
        random_data = {}
        for i in range(n):
            name = f"System_{i+1}"
            random_data[name] = [random.randint(0, 1) for _ in features]
        return pd.DataFrame(random_data, index=features)

    tk.Button(root, text="üîç –ü—ñ–¥—ñ–±—Ä–∞—Ç–∏ —Å–∏—Å—Ç–µ–º—É", command=process_selection).pack(pady=10)
    tk.Button(root, text="üìä –ü–æ–∫–∞–∑–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫–∏ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ", command=show_charts).pack(pady=5)
    tk.Button(root, text="üßπ –û—á–∏—Å—Ç–∏—Ç–∏", command=clear_all).pack(pady=5)
    root.mainloop()

# –ó–∞–ø—É—Å–∫ GUI
launch_gui()
